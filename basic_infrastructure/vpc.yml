AWSTemplateFormatVersion: 2010-09-09
Description: 'CloudFormation Template to deploys a basic VPC / Network'

#=============================================================================#
# Below Resourses will be created as part of this stack.
#1. VPC
#2. Internet Gateway
#3. Subnets (2-Public-sb in 2AZ | 2-Private-sb in 2AZ | 2-DBPrivate-sb in 2AZ)
#4. Route Table and Routes
#5. Attached subnets to Route tables
#6. NAT Gateway
#7. Elastic IP
#=============================================================================#

Parameters:

#=============================================================================#
# Parameters 
#=============================================================================#

  RootStackName:
    Type: String


  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.3.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.4.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.2.0/24

  DBPrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for DB subnet in the first Availability Zone
    Type: String
    Default: 10.0.5.0/28  

  DBPrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for DB subnet in the second Availability Zone
    Type: String
    Default: 10.0.5.16/28

Resources:

#=============================================================================#
# VPC
#=============================================================================#

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Sub ${RootStackName}-VPC

#=============================================================================#
# Internet Gateway
#=============================================================================#

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${RootStackName}-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

#=============================================================================#
# subnets
#=============================================================================#

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: !Sub ${RootStackName}-Public-SB-1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${RootStackName}-Public-SB-2
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${RootStackName}-Private-SB-1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${RootStackName}-Private-SB-2

  DBPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref DBPrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${RootStackName}-DBPrivate-SB-1

  DBPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref DBPrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Sub ${RootStackName}-DBPrivate-SB-2
   
#=============================================================================#
# Route Table and Routes
#=============================================================================#

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${RootStackName}-Public-RT
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
  # Here Create private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${RootStackName}-Private-RT
  # PrivateRoute1:            # Private route table can access internet via NAT (created below)
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     # Route traffic through the NAT Gateway:
  #     NatGatewayId: !Ref NATGateway

  DBPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${RootStackName}-DBPrivate-RT

#########Below Code is for creating second route table for private subnet this is for HA scenerio
  # PrivateRouteTable2:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${RootStackName}-Private-RT2

  # DefaultPrivateRoute2:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable2
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NatGateway2

#=============================================================================#
# Attached subnets to Route tables
#=============================================================================#  

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  DBPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBPrivateSubnet1
      RouteTableId: !Ref DBPrivateRouteTable
  DBPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBPrivateSubnet2
      RouteTableId: !Ref DBPrivateRouteTable

  # PrivateSubnet2RouteTable2Association:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable2
  #     SubnetId: !Ref PrivateSubnet2

#=============================================================================#
# NAT Gateway
#=============================================================================#

  # NATGateway:
  #   Type: AWS::EC2::NatGateway
  #   Properties: 
  #     AllocationId: !GetAtt NatGateway1EIP.AllocationId
  #     SubnetId: !Ref PublicSubnet1
  #     Tags: 
  #     - Key: Name
  #       Value: !Sub ${RootStackName}-NAT
  
#=============================================================================#
# EIP For NAT Gateway
#=============================================================================#
  # NatGateway1EIP:
  #   Type: AWS::EC2::EIP
  #   DependsOn: AttachGateway
  #   Properties:
  #     Domain: VPC
  #     Tags:
  #     - Key: Name
  #       Value: !Sub ${RootStackName}-NATGW-EIP

###### Secendary NAT GW for High Availability
  # NatGateway2:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NatGateway2EIP.AllocationId
  #     SubnetId: !Ref PublicSubnet2
  # NatGateway2EIP:
  #   Type: AWS::EC2::EIP
  #   DependsOn: InternetGatewayAttachment
  #   Properties:
  #     Domain: vpc

Outputs:
  VPC:
    Description: VPC of the base network
    Value: !Ref VPC

  PublicSubnet1:
    Description: First Public Subnet
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: Second Public Subnet
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: First Private Subnet
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: Second Private Subnet
    Value: !Ref PrivateSubnet2

  DBPrivateSubnet1:
    Description: first DB Private Subnet
    Value: !Ref DBPrivateSubnet1

  DBPrivateSubnet2:
    Description: Second DB Private Subnet
    Value: !Ref DBPrivateSubnet2

